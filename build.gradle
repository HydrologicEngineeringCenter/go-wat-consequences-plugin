//The Gradle JVM needs to be Java 1.8. It'll build with anything, but you're gonna run into runtime errors "Java lang no method found" if you dont.

plugins {
    id 'java-library'
    id 'maven-publish'
}
//Dependency Management
repositories {
    mavenCentral()
    maven {
        url "https://www.hec.usace.army.mil/nexus/repository/maven-public/"
    }
}

dependencies {
    implementation "org.junit.jupiter:junit-jupiter:5.4.2"
    implementation 'mil.army.usace.hec.wat:wat-hec-maps:dev-3.0.0.1856-20210504.234927-1@jar'
    implementation 'mil.army.usace.hec.wat:wat-hec:dev-3.0.0.1855-20210504.180613-1@jar'
    implementation 'mil.army.usace.hec.wat:wat-hecnf:dev-3.0.0.1855-20210504.180601-1@jar'
    implementation 'mil.army.usace.hec.wat:wat-hecnf-pluginapi:dev-3.0.0.1855-20210504.180607-1@jar'
    implementation 'org.jdom:jdom:1.1'
    implementation 'mil.army.usace.hec.wat:wat-rma:dev-3.0.0.1855-20210504.180620-1@jar'
    implementation 'mil.army.usace.hec.wat:wat-rmadev:dev-3.0.0.1855-20210504.180626-1@jar'
    implementation 'mil.army.usace.hec.wat:wat:dev-3.0.0.1855-20210504.180549-1@jar'
    implementation 'mil.army.usace.hec.wat:wat-model:dev-3.0.0.1855-20210504.180555-1@jar'
    implementation 'mil.army.usace.hec:javaHeclib:7-HZ-win-x64@zip'
    implementation 'org.apache.commons:commons-lang3:3.11'
}

jar {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    manifest {
        attributes "WatPluginMainClass": "Go_Con_Plugin"
    }
}

group 'mil.army.usace.hec'
version '0.0.1'

publishing {
    repositories {
        // The target repository
        maven {
            // Choose whatever name you want
            name = "GitHubPackages"
            // The url of the repository, where the artifacts will be published
            url = "https://maven.pkg.github.com/HydrologicEngineeringCenter/FIRO_WAT_ForecastProcessor"
            credentials {
                // The credentials (described in the next section)
                username = project.findProperty("gpr.user")
                password = project.findProperty("gpr.key")
            }
        }
    }
    publications {
        gpr(org.gradle.api.publish.maven.MavenPublication) {
            from(components.java)
            // Fixes the error with dynamic versions when using Spring Boot
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
            }
        }
    }
}